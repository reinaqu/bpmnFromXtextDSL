/*
 * generated by Xtext 2.26.0
 */
package security.xtext.bmpn.simple.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import security.xtext.bmpn.simple.bPSecDsl.BPSecDslPackage;
import security.xtext.bmpn.simple.bPSecDsl.Declaration;
import security.xtext.bmpn.simple.bPSecDsl.Policy;
import security.xtext.bmpn.simple.bPSecDsl.Task;
import security.xtext.bmpn.simple.bPSecDsl.User;
import security.xtext.bmpn.simple.services.BPSecDslGrammarAccess;

@SuppressWarnings("all")
public class BPSecDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BPSecDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BPSecDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BPSecDslPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case BPSecDslPackage.POLICY:
				sequence_Policy(context, (Policy) semanticObject); 
				return; 
			case BPSecDslPackage.PROCESS:
				sequence_Process(context, (security.xtext.bmpn.simple.bPSecDsl.Process) semanticObject); 
				return; 
			case BPSecDslPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case BPSecDslPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns Declaration
	 *
	 * Constraint:
	 *     (processes+=Process+ users+=User users+=User*)
	 * </pre>
	 */
	protected void sequence_Declaration(ISerializationContext context, Declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Policy returns Policy
	 *
	 * Constraint:
	 *     (name=ID declarations+=Declaration+)
	 * </pre>
	 */
	protected void sequence_Policy(ISerializationContext context, Policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=ID refProcess=[Process|ID] tasks+=Task+)
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, security.xtext.bmpn.simple.bPSecDsl.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=ID refTask=[Activity|ID])
	 * </pre>
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BPSecDslPackage.Literals.TASK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BPSecDslPackage.Literals.TASK__NAME));
			if (transientValues.isValueTransient(semanticObject, BPSecDslPackage.Literals.TASK__REF_TASK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BPSecDslPackage.Literals.TASK__REF_TASK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTaskAccess().getRefTaskActivityIDTerminalRuleCall_3_0_1(), semanticObject.eGet(BPSecDslPackage.Literals.TASK__REF_TASK, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     User returns User
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BPSecDslPackage.Literals.USER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BPSecDslPackage.Literals.USER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
