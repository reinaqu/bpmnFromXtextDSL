/*
 * generated by Xtext 2.26.0
 */
package security.xtext.bmpn.simple.scoping;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.cli.GnuParser;
import org.eclipse.bpmn2.Activity;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.mwe2.language.scoping.QualifiedNameProvider;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;

import security.xtext.bmpn.simple.BPMN2QualifiedNameProvider;
import security.xtext.bmpn.simple.bPSecDsl.BPSecDslPackage;
import security.xtext.bmpn.simple.bPSecDsl.Task;
import security.xtext.bmpn.simple.bPSecDsl.Process;

import org.eclipse.emf.ecore.util.EcoreUtil;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */

public class BPSecDslScopeProvider extends AbstractBPSecDslScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (reference == BPSecDslPackage.Literals.TASK__REF_TASK) {
			security.xtext.bmpn.simple.bPSecDsl.Process p = 
					EcoreUtil2.getContainerOfType(context, 
							         security.xtext.bmpn.simple.bPSecDsl.Process.class);
			List<Activity> tasks = new ArrayList<>();
			for (EObject o : p.getRefProcess().eContents()) {
				if (o instanceof Activity) {
					tasks.add((Activity) o);
				}
			}
			return Scopes.scopeFor(tasks, (Activity e)-> {
				String id = e.getId();
				return QualifiedName.create(id);
			}, IScope.NULLSCOPE);
		}
		return super.getScope(context, reference);
	}
	
//	@Override
//	public IScope getScope(EObject context, EReference reference) {
//		System.out.println("getting scope");
////		System.out.println("context " + context);
////		System.out.println("is instanceof context " + context);
////		System.out.println("reference " + reference);
//		
//		IScope res =null;
//		if (context instanceof Task
//				&& reference == BPSecDslPackage.Literals.TASK__REF_TASK) {
//		//	res = scopeForTaskRef(context);
//			org.eclipse.bpmn2.Process processRef = ((Process)context.eContainer()).getRefProcess();
//			System.out.println("Process " + processRef.getName());
//			System.out.println("process contents" + processRef.eContents());
//			System.out.println("resource" + processRef.eResource());
//			res = super.getScope(context, reference);
//			System.out.println("Resulting IScope " );
//			for (IEObjectDescription iod: res.getAllElements()) {
//				System.out.println("iod..."+iod);
//				System.out.println("uri..."+iod.getEObjectURI());
//				System.out.println("object..."+iod.getEObjectOrProxy());
//				System.out.println("Container of context " + context.eContainer());
//				org.eclipse.bpmn2.Task t = (org.eclipse.bpmn2.Task) iod.getEObjectOrProxy();
//				System.out.println("Get contaning " + t.getName());
//				System.out.println("Get contaning " + t.eContainingFeature());
//				System.out.println("Get container " + t.eContainer());
//
//				System.out.println("Is ancestor? "+ EcoreUtil.isAncestor(processRef, t));
//			}
//			res = super.getScope(context, reference);	
//		}else {
//			res = super.getScope(context, reference);
//		}	
//		return res;
//	}
//
//	protected IScope scopeForTaskRef(EObject context) {
//	    // Collect a list of candidates by going through the model
//        // EcoreUtil2 provides useful functionality to do that
//        // For example searching for all elements within the root Object's tree
//        EObject rootElement = EcoreUtil2.getRootContainer(context);
//        
////        Process processContainer = EcoreUtil2.getContainerOfType(context, Process.class);
//        List<Task> candidates=	EcoreUtil2.getAllContentsOfType(rootElement, Task.class);
////        System.out.println("container " + processContainer);
////        org.eclipse.bpmn2.Process bpmnProcess = processContainer.getRefProcess();
////        System.out.println("proces id" + bpmnProcess.getId() + " name "+bpmnProcess.getName());
////        System.out.println("normalized uri" + EcoreUtil2.getNormalizedURI(bpmnProcess));
////        System.out.println("proces id" + bpmnProcess.getId() + " name "+bpmnProcess.getName());
////        
////
////        List<org.eclipse.bpmn2.Task> candidates = bpmnProcess.getFlowElements()
////        												.stream()
////        												.filter(fe-> fe instanceof org.eclipse.bpmn2.Task)
////        												.map(t->(org.eclipse.bpmn2.Task)t)
////        												.collect(Collectors.toList());
////        
////        System.out.println("Candidatos");
////        candidates.forEach(System.out::println);
//        //
//        IScope existingScope = Scopes.scopeFor(candidates);
//        return new FilteringScope(existingScope, 
//        			e->{System.out.println("scope "+ e); return true;});
//	}
}
