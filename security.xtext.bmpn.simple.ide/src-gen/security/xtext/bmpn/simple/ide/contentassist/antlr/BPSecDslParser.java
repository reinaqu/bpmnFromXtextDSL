/*
 * generated by Xtext 2.26.0
 */
package security.xtext.bmpn.simple.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import security.xtext.bmpn.simple.ide.contentassist.antlr.internal.InternalBPSecDslParser;
import security.xtext.bmpn.simple.services.BPSecDslGrammarAccess;

public class BPSecDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BPSecDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BPSecDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPolicyAccess().getGroup(), "rule__Policy__Group__0");
			builder.put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
			builder.put(grammarAccess.getDeclarationAccess().getGroup_3(), "rule__Declaration__Group_3__0");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getPolicyAccess().getNameAssignment_1(), "rule__Policy__NameAssignment_1");
			builder.put(grammarAccess.getPolicyAccess().getDeclarationsAssignment_3(), "rule__Policy__DeclarationsAssignment_3");
			builder.put(grammarAccess.getDeclarationAccess().getProcessesAssignment_0(), "rule__Declaration__ProcessesAssignment_0");
			builder.put(grammarAccess.getDeclarationAccess().getUsersAssignment_2(), "rule__Declaration__UsersAssignment_2");
			builder.put(grammarAccess.getDeclarationAccess().getUsersAssignment_3_1(), "rule__Declaration__UsersAssignment_3_1");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_1(), "rule__Process__NameAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getRefProcessAssignment_3(), "rule__Process__RefProcessAssignment_3");
			builder.put(grammarAccess.getProcessAccess().getTasksAssignment_5(), "rule__Process__TasksAssignment_5");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getRefTaskAssignment_3(), "rule__Task__RefTaskAssignment_3");
			builder.put(grammarAccess.getUserAccess().getNameAssignment(), "rule__User__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BPSecDslGrammarAccess grammarAccess;

	@Override
	protected InternalBPSecDslParser createParser() {
		InternalBPSecDslParser result = new InternalBPSecDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BPSecDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BPSecDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
