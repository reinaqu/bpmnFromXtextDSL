/**
 * generated by Xtext 2.26.0
 */
package security.xtext.bmpn.simple.bPSecDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import security.xtext.bmpn.simple.bPSecDsl.BPSecDslPackage;
import security.xtext.bmpn.simple.bPSecDsl.Task;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Process</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link security.xtext.bmpn.simple.bPSecDsl.impl.ProcessImpl#getName <em>Name</em>}</li>
 *   <li>{@link security.xtext.bmpn.simple.bPSecDsl.impl.ProcessImpl#getRefProcess <em>Ref Process</em>}</li>
 *   <li>{@link security.xtext.bmpn.simple.bPSecDsl.impl.ProcessImpl#getTasks <em>Tasks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProcessImpl extends MinimalEObjectImpl.Container implements security.xtext.bmpn.simple.bPSecDsl.Process
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRefProcess() <em>Ref Process</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefProcess()
   * @generated
   * @ordered
   */
  protected org.eclipse.bpmn2.Process refProcess;

  /**
   * The cached value of the '{@link #getTasks() <em>Tasks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTasks()
   * @generated
   * @ordered
   */
  protected EList<Task> tasks;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BPSecDslPackage.Literals.PROCESS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BPSecDslPackage.PROCESS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.eclipse.bpmn2.Process getRefProcess()
  {
    if (refProcess != null && refProcess.eIsProxy())
    {
      InternalEObject oldRefProcess = (InternalEObject)refProcess;
      refProcess = (org.eclipse.bpmn2.Process)eResolveProxy(oldRefProcess);
      if (refProcess != oldRefProcess)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BPSecDslPackage.PROCESS__REF_PROCESS, oldRefProcess, refProcess));
      }
    }
    return refProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.eclipse.bpmn2.Process basicGetRefProcess()
  {
    return refProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRefProcess(org.eclipse.bpmn2.Process newRefProcess)
  {
    org.eclipse.bpmn2.Process oldRefProcess = refProcess;
    refProcess = newRefProcess;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BPSecDslPackage.PROCESS__REF_PROCESS, oldRefProcess, refProcess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Task> getTasks()
  {
    if (tasks == null)
    {
      tasks = new EObjectContainmentEList<Task>(Task.class, this, BPSecDslPackage.PROCESS__TASKS);
    }
    return tasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BPSecDslPackage.PROCESS__TASKS:
        return ((InternalEList<?>)getTasks()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BPSecDslPackage.PROCESS__NAME:
        return getName();
      case BPSecDslPackage.PROCESS__REF_PROCESS:
        if (resolve) return getRefProcess();
        return basicGetRefProcess();
      case BPSecDslPackage.PROCESS__TASKS:
        return getTasks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BPSecDslPackage.PROCESS__NAME:
        setName((String)newValue);
        return;
      case BPSecDslPackage.PROCESS__REF_PROCESS:
        setRefProcess((org.eclipse.bpmn2.Process)newValue);
        return;
      case BPSecDslPackage.PROCESS__TASKS:
        getTasks().clear();
        getTasks().addAll((Collection<? extends Task>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BPSecDslPackage.PROCESS__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BPSecDslPackage.PROCESS__REF_PROCESS:
        setRefProcess((org.eclipse.bpmn2.Process)null);
        return;
      case BPSecDslPackage.PROCESS__TASKS:
        getTasks().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BPSecDslPackage.PROCESS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BPSecDslPackage.PROCESS__REF_PROCESS:
        return refProcess != null;
      case BPSecDslPackage.PROCESS__TASKS:
        return tasks != null && !tasks.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ProcessImpl
