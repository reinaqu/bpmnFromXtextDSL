/*
 * generated by Xtext 2.26.0
 */
grammar InternalBPSecDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package security.xtext.bmpn.simple.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package security.xtext.bmpn.simple.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import security.xtext.bmpn.simple.services.BPSecDslGrammarAccess;

}
@parser::members {
	private BPSecDslGrammarAccess grammarAccess;

	public void setGrammarAccess(BPSecDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePolicy
entryRulePolicy
:
{ before(grammarAccess.getPolicyRule()); }
	 rulePolicy
{ after(grammarAccess.getPolicyRule()); } 
	 EOF 
;

// Rule Policy
rulePolicy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolicyAccess().getGroup()); }
		(rule__Policy__Group__0)
		{ after(grammarAccess.getPolicyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getGroup()); }
		(rule__Declaration__Group__0)
		{ after(grammarAccess.getDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcess
entryRuleProcess
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;

// Rule Process
ruleProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessAccess().getGroup()); }
		(rule__Process__Group__0)
		{ after(grammarAccess.getProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTask
entryRuleTask
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTaskAccess().getGroup()); }
		(rule__Task__Group__0)
		{ after(grammarAccess.getTaskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUser
entryRuleUser
:
{ before(grammarAccess.getUserRule()); }
	 ruleUser
{ after(grammarAccess.getUserRule()); } 
	 EOF 
;

// Rule User
ruleUser 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUserAccess().getNameAssignment()); }
		(rule__User__NameAssignment)
		{ after(grammarAccess.getUserAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__0__Impl
	rule__Policy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getPolicyKeyword_0()); }
	'policy'
	{ after(grammarAccess.getPolicyAccess().getPolicyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__1__Impl
	rule__Policy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getNameAssignment_1()); }
	(rule__Policy__NameAssignment_1)
	{ after(grammarAccess.getPolicyAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__2__Impl
	rule__Policy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getDeclarationsKeyword_2()); }
	'declarations:'
	{ after(grammarAccess.getPolicyAccess().getDeclarationsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPolicyAccess().getDeclarationsAssignment_3()); }
		(rule__Policy__DeclarationsAssignment_3)
		{ after(grammarAccess.getPolicyAccess().getDeclarationsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getPolicyAccess().getDeclarationsAssignment_3()); }
		(rule__Policy__DeclarationsAssignment_3)*
		{ after(grammarAccess.getPolicyAccess().getDeclarationsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDeclarationAccess().getProcessesAssignment_0()); }
		(rule__Declaration__ProcessesAssignment_0)
		{ after(grammarAccess.getDeclarationAccess().getProcessesAssignment_0()); }
	)
	(
		{ before(grammarAccess.getDeclarationAccess().getProcessesAssignment_0()); }
		(rule__Declaration__ProcessesAssignment_0)*
		{ after(grammarAccess.getDeclarationAccess().getProcessesAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getUsersKeyword_1()); }
	'users'
	{ after(grammarAccess.getDeclarationAccess().getUsersKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__2__Impl
	rule__Declaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getUsersAssignment_2()); }
	(rule__Declaration__UsersAssignment_2)
	{ after(grammarAccess.getDeclarationAccess().getUsersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getGroup_3()); }
	(rule__Declaration__Group_3__0)*
	{ after(grammarAccess.getDeclarationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group_3__0__Impl
	rule__Declaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getDeclarationAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getUsersAssignment_3_1()); }
	(rule__Declaration__UsersAssignment_3_1)
	{ after(grammarAccess.getDeclarationAccess().getUsersAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__0__Impl
	rule__Process__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getProcessKeyword_0()); }
	'process'
	{ after(grammarAccess.getProcessAccess().getProcessKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__1__Impl
	rule__Process__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getNameAssignment_1()); }
	(rule__Process__NameAssignment_1)
	{ after(grammarAccess.getProcessAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__2__Impl
	rule__Process__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getMapsToKeyword_2()); }
	'mapsTo'
	{ after(grammarAccess.getProcessAccess().getMapsToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__3__Impl
	rule__Process__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getRefProcessAssignment_3()); }
	(rule__Process__RefProcessAssignment_3)
	{ after(grammarAccess.getProcessAccess().getRefProcessAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__4__Impl
	rule__Process__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__5__Impl
	rule__Process__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProcessAccess().getTasksAssignment_5()); }
		(rule__Process__TasksAssignment_5)
		{ after(grammarAccess.getProcessAccess().getTasksAssignment_5()); }
	)
	(
		{ before(grammarAccess.getProcessAccess().getTasksAssignment_5()); }
		(rule__Process__TasksAssignment_5)*
		{ after(grammarAccess.getProcessAccess().getTasksAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__0__Impl
	rule__Task__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
	'task'
	{ after(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__1__Impl
	rule__Task__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getNameAssignment_1()); }
	(rule__Task__NameAssignment_1)
	{ after(grammarAccess.getTaskAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__2__Impl
	rule__Task__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getMapsToKeyword_2()); }
	'mapsTo'
	{ after(grammarAccess.getTaskAccess().getMapsToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getRefTaskAssignment_3()); }
	(rule__Task__RefTaskAssignment_3)
	{ after(grammarAccess.getTaskAccess().getRefTaskAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Policy__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPolicyAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__DeclarationsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
		ruleDeclaration
		{ after(grammarAccess.getPolicyAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__ProcessesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getProcessesProcessParserRuleCall_0_0()); }
		ruleProcess
		{ after(grammarAccess.getDeclarationAccess().getProcessesProcessParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__UsersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getUsersUserParserRuleCall_2_0()); }
		ruleUser
		{ after(grammarAccess.getDeclarationAccess().getUsersUserParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__UsersAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getUsersUserParserRuleCall_3_1_0()); }
		ruleUser
		{ after(grammarAccess.getDeclarationAccess().getUsersUserParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__RefProcessAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getRefProcessProcessCrossReference_3_0()); }
		(
			{ before(grammarAccess.getProcessAccess().getRefProcessProcessIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getProcessAccess().getRefProcessProcessIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getProcessAccess().getRefProcessProcessCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__TasksAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getTasksTaskParserRuleCall_5_0()); }
		ruleTask
		{ after(grammarAccess.getProcessAccess().getTasksTaskParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__RefTaskAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getRefTaskActivityCrossReference_3_0()); }
		(
			{ before(grammarAccess.getTaskAccess().getRefTaskActivityIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTaskAccess().getRefTaskActivityIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getTaskAccess().getRefTaskActivityCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__User__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUserAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getUserAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
