/*
 * generated by Xtext 2.26.0
 */
package security.xtext.bmpn.simple.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BPSecDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "security.xtext.bmpn.simple.BPSecDsl.Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDeclarationsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		
		//Policy:
		//    'policy' name=ID
		//    'declarations:'
		//    (declarations+=Declaration)+
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'policy' name=ID
		//'declarations:'
		//(declarations+=Declaration)+
		public Group getGroup() { return cGroup; }
		
		//'policy'
		public Keyword getPolicyKeyword_0() { return cPolicyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'declarations:'
		public Keyword getDeclarationsKeyword_2() { return cDeclarationsKeyword_2; }
		
		//(declarations+=Declaration)+
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "security.xtext.bmpn.simple.BPSecDsl.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcessesProcessParserRuleCall_0_0 = (RuleCall)cProcessesAssignment_0.eContents().get(0);
		private final Keyword cUsersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUsersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsersUserParserRuleCall_2_0 = (RuleCall)cUsersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUsersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUsersUserParserRuleCall_3_1_0 = (RuleCall)cUsersAssignment_3_1.eContents().get(0);
		
		//Declaration:
		//    (processes+=Process)+
		//    'users'
		//    (users+=User)(',' users+=User)*
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//(processes+=Process)+
		//'users'
		//(users+=User)(',' users+=User)*
		public Group getGroup() { return cGroup; }
		
		//(processes+=Process)+
		public Assignment getProcessesAssignment_0() { return cProcessesAssignment_0; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_0_0() { return cProcessesProcessParserRuleCall_0_0; }
		
		//'users'
		public Keyword getUsersKeyword_1() { return cUsersKeyword_1; }
		
		//(users+=User)
		public Assignment getUsersAssignment_2() { return cUsersAssignment_2; }
		
		//User
		public RuleCall getUsersUserParserRuleCall_2_0() { return cUsersUserParserRuleCall_2_0; }
		
		//(',' users+=User)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//users+=User
		public Assignment getUsersAssignment_3_1() { return cUsersAssignment_3_1; }
		
		//User
		public RuleCall getUsersUserParserRuleCall_3_1_0() { return cUsersUserParserRuleCall_3_1_0; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "security.xtext.bmpn.simple.BPSecDsl.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMapsToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefProcessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefProcessProcessCrossReference_3_0 = (CrossReference)cRefProcessAssignment_3.eContents().get(0);
		private final RuleCall cRefProcessProcessIDTerminalRuleCall_3_0_1 = (RuleCall)cRefProcessProcessCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTasksAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTasksTaskParserRuleCall_5_0 = (RuleCall)cTasksAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Process:
		//    'process' name=ID  'mapsTo' refProcess=[bpmn2::Process] '{'
		//        (tasks+=Task)+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'process' name=ID  'mapsTo' refProcess=[bpmn2::Process] '{'
		//    (tasks+=Task)+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'mapsTo'
		public Keyword getMapsToKeyword_2() { return cMapsToKeyword_2; }
		
		//refProcess=[bpmn2::Process]
		public Assignment getRefProcessAssignment_3() { return cRefProcessAssignment_3; }
		
		//[bpmn2::Process]
		public CrossReference getRefProcessProcessCrossReference_3_0() { return cRefProcessProcessCrossReference_3_0; }
		
		//ID
		public RuleCall getRefProcessProcessIDTerminalRuleCall_3_0_1() { return cRefProcessProcessIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(tasks+=Task)+
		public Assignment getTasksAssignment_5() { return cTasksAssignment_5; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_5_0() { return cTasksTaskParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "security.xtext.bmpn.simple.BPSecDsl.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMapsToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefTaskAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefTaskActivityCrossReference_3_0 = (CrossReference)cRefTaskAssignment_3.eContents().get(0);
		private final RuleCall cRefTaskActivityIDTerminalRuleCall_3_0_1 = (RuleCall)cRefTaskActivityCrossReference_3_0.eContents().get(1);
		
		//Task:
		//    'task' name=ID "mapsTo" refTask=[bpmn2::Activity]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' name=ID "mapsTo" refTask=[bpmn2::Activity]
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"mapsTo"
		public Keyword getMapsToKeyword_2() { return cMapsToKeyword_2; }
		
		//refTask=[bpmn2::Activity]
		public Assignment getRefTaskAssignment_3() { return cRefTaskAssignment_3; }
		
		//[bpmn2::Activity]
		public CrossReference getRefTaskActivityCrossReference_3_0() { return cRefTaskActivityCrossReference_3_0; }
		
		//ID
		public RuleCall getRefTaskActivityIDTerminalRuleCall_3_0_1() { return cRefTaskActivityIDTerminalRuleCall_3_0_1; }
	}
	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "security.xtext.bmpn.simple.BPSecDsl.User");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//User:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final PolicyElements pPolicy;
	private final DeclarationElements pDeclaration;
	private final ProcessElements pProcess;
	private final TaskElements pTask;
	private final UserElements pUser;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BPSecDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPolicy = new PolicyElements();
		this.pDeclaration = new DeclarationElements();
		this.pProcess = new ProcessElements();
		this.pTask = new TaskElements();
		this.pUser = new UserElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("security.xtext.bmpn.simple.BPSecDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Policy:
	//    'policy' name=ID
	//    'declarations:'
	//    (declarations+=Declaration)+
	//    ;
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}
	
	//Declaration:
	//    (processes+=Process)+
	//    'users'
	//    (users+=User)(',' users+=User)*
	// ;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Process:
	//    'process' name=ID  'mapsTo' refProcess=[bpmn2::Process] '{'
	//        (tasks+=Task)+
	//    '}'
	//;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//Task:
	//    'task' name=ID "mapsTo" refTask=[bpmn2::Activity]
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//User:
	//    name=ID
	//;
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
